You will upload two files(machine.py and beverages.py).
Create the CoffeeMachine class containing:
• A builder.
• An EmptyCup class inheriting HotBeverage, with the name
"empty cup", a 0.90 price and the description "An empty
cup?! Gimme my money back!".
Copy the beverages.py file frome the previous exercise in
this exercise folder to use the classes it contains.
• A BrokenMachineException class inheriting the Exception
with the text "This coffee machine has to be repaired.".
This text must be defined in the exception’s builder.
• A repair() method that fixes the machine so it can serve
hot drinks again.
• A serve() method that will have the following
specifications:
Parameters : A unique parameter (other than self) that will
be a class derived from HotBeverage.
Return: Alternatively (randomly), the method returns an
instance of the class set in parameter and alternatively,
an EmptyCup instance. Obsolescence: The machine is cheap
and breaks down after serving 10 drinks. When out of order:
the call for the serve() method must raise a
CoffeeMachine.BrokenMachitype exception until the repair()
method is called.
Fixing: After calling the repair() method, the serve()
method can work again without raising the exception before
it breaks down again after serving 10 drinks. In your
tests, instantiate the CoffeeMachine class. Ask for
various drinks from the beverages.py file and display the
drink you’re served until the machine breaks down (you
will then manage the raised exception). Fix the machine
and start again until the machine breaks down again
(manage the exception again).